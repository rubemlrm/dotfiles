---
- name: Setup ZSH
  become: true
  become_user: '{{ username }}'
  block:
    - name: Check if Oh MY ZSH is already installed
      ansible.builtin.stat:
        path: "{{ home_dir }}/.oh-my-zsh"
      register: oh_my_zsh_installed
      changed_when: false
    - name: Install Oh MY ZSH
      ansible.builtin.raw: sh -c 'curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh'
      when: not oh_my_zsh_installed.stat.exists
      tags:
        - skip_ansible_lint
    - name: Install Oh My ZSH Plugins
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ home_dir }}/{{ item.dest }}"
        version: "{{ item.version }}"
      with_items: "{{ dotfiles_zsh_plugins }}"
    - name: Link zsh themes
      ansible.builtin.file:
        src: "{{ home_dir }}/.config/zsh/themes/spaceship-prompt/spaceship.zsh-theme"
        path: "{{ home_dir }}/.config/zsh/themes/spaceship.zsh-theme"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0644"
        state: link
    - name: Clone cli utils
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        version: "{{ item.version }}"
      with_items:
        - repo: 'https://github.com/junegunn/fzf.git'
          dest: "{{ home_dir }}/.fzf"
          version: "0.53.0"
    - name: Setup fzf key bindings
      ansible.builtin.stat:
        path: "{{ home_dir }}/.fzf.zsh"
      register: fzf_installed
      changed_when: false
    - name: Install FZF
      ansible.builtin.raw: sh -c 'bash {{ home_dir }}.fzf/install --key-bindings --completion --update-rc'
      when: not fzf_installed.stat.exists
      tags:
        - skip_ansible_lint

    - name: Remove oh my zshrc file
      ansible.builtin.file:
        path: "{{ home_dir }}.zshrc"
        state: absent
      when: not oh_my_zsh_installed.stat.exists
    - name: Restore zsh settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/zsh/{{ item.name }}"
        dest: "{{ home_dir }}/{{ item.name }}"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "{{ item.mode }}"
        state: link
      with_items:
        - name: ".config/zsh/alias"
          mode: "0755"
        - name: ".config/zsh/functions"
          mode: "0755"
        - name: ".config/zsh/alias.zsh"
          mode: "0644"
        - name: ".config/zsh/functions.zsh"
          mode: "0644"
        - name: ".zshrc"
          mode: "0644"

    - name: Restore neofetch settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/neofetch/"
        path: "{{ home_dir }}/.config/neofetch"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0755"
        state: link
    - name: Restore tmux settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/tmux/{{ item.name }}"
        path: "{{ home_dir }}/{{ item.name }}"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "{{ item.mode }}"
        state: link
      with_items:
        - name: ".tmux.conf"
          mode: "0644"
        - name: ".tmux"
          mode: "0755"

    - name: Create temp public file
      ansible.builtin.copy: # noqa template-instead-of-copy
        dest: '{{ home_dir }}.config/zsh/alias/host_alias.zsh'
        content: "{{ host_zsh_alias }}"
        mode: '0644'
      when: host_zsh_alias is defined


    - name: Restore nvim settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/nvim/"
        dest: "{{ home_dir }}/.config/nvim"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        state: "link"
        mode: "0755"

    - name: Restore npm settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/npm/.npmrc"
        dest: "{{ home_dir }}/.npmrc"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        state: "link"
        mode: "0755"

    - name: Restore stow settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/stow/.stow-global-ignore"
        dest: "{{ home_dir }}/.stow-global-ignore"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        state: "link"
        mode: "0755"

- name: Restore Gui Settings
  when: use_desktop is true and  ansible_facts['distribution'] == "Fedora"
  block:
    - name: Create wallpapers directory
      ansible.builtin.file:
        path: "{{ home_dir }}/Pictures/wallpapers/"
        state: directory
        owner: "{{ username }}"
        mode: "0755"

    - name: Import default wallpapers
      ansible.builtin.copy:
        src: "{{ role_path }}/files/wallpapers/"
        dest: "{{ home_dir }}/Pictures/wallpapers"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0755"


    - name: Restore Alacritty settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/alacritty/"
        dest: "/home/{{ username }}/.config/alacritty"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0755"
        state: "link"

    - name: Restore Terminator settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/terminator/"
        dest: "{{ home_dir }}/.config/terminator"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0755"
        state: "link"

    - name: Restore i3 settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/i3/"
        dest: "{{ home_dir }}/.config/i3"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0755"
        state: "link"

    - name: Restore polybar settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/polybar/"
        dest: "{{ home_dir }}/.config/polybar"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0755"
        state: "link"

    - name: Restore rofi settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/rofi/"
        dest: "{{ home_dir }}/.config/rofi"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0755"
        state: "link"

    - name: Restore picom settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/picom/picom.conf"
        dest: "{{ home_dir }}/.config/picom.conf"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0644"
        state: "link"

    - name: Restore dunst settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/dunst/"
        dest: "{{ home_dir }}/.config/dunst"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0755"
        state: "link"

    - name: Restore gtk settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/{{ item }}/"
        dest: "{{ home_dir }}/.config/{{ item }}"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0755"
        state: "link"
      with_items:
        - gtk-3.0
        - gtk-4.0

    - name: Restore solaar settings
      ansible.builtin.file:
        src: "{{ role_path }}/files/solaar/"
        dest: "{{ home_dir }}/.config/solaar"
        owner: "{{ username }}"
        group: "{{ user_group }}"
        mode: "0755"
        state: "link"
